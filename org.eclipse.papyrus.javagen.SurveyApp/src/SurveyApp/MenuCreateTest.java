// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package SurveyApp;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.io.*;

import SurveyApp.Menu;
import SurveyApp.Survey;
import SurveyApp.Test;
import SurveyApp.SurveyManager;
import SurveyApp.CorrectResponseBoolean;

/************************************************************/
/**
 * 
 */
public class MenuCreateTest extends MenuCreateSurvey {

    private String filePath;
    private SurveyManager surveyManager;
    private Survey survey;
    private ArrayList<Question> questions;
    private Boolean isGradable;
    private Boolean isSaved;

    private Scanner reader = new Scanner(System.in);
    private static final Pattern ALPHANUMERIC = Pattern.compile("[^a-zA-Z0-9]");

    private static final ArrayList<String> KNOWN_STRINGS_FALSE = new ArrayList<String>();
    private static final ArrayList<String> KNOWN_STRINGS_TRUE = new ArrayList<String>();

    private static void initKnownStrings() {
	KNOWN_STRINGS_FALSE.add("F");
	KNOWN_STRINGS_FALSE.add("f");
	KNOWN_STRINGS_FALSE.add("False");
	KNOWN_STRINGS_FALSE.add("false");

	KNOWN_STRINGS_TRUE.add("T");
	KNOWN_STRINGS_TRUE.add("t");
	KNOWN_STRINGS_TRUE.add("True");
	KNOWN_STRINGS_TRUE.add("true");
    }

    public MenuCreateTest() {
	MenuChoice choice1 = new MenuChoice("Add a new T/F question", 1);
	MenuChoice choice2 = new MenuChoice("Add a new multiple choice question", 2);
	MenuChoice choice3 = new MenuChoice("Add a new short answer question", 3);
	MenuChoice choice4 = new MenuChoice("Add a new essay question", 4);
	MenuChoice choice5 = new MenuChoice("Add a new ranking question", 5);
	MenuChoice choice6 = new MenuChoice("Add a new matching question", 6);
	MenuChoice choice7 = new MenuChoice("Return", 7);

	ArrayList<MenuChoice> choices = new ArrayList<MenuChoice>();

	choices.add(choice1);
	choices.add(choice2);
	choices.add(choice3);
	choices.add(choice4);
	choices.add(choice5);
	choices.add(choice6);
	choices.add(choice7);

	this.setChoices(choices);

	initKnownStrings();

	this.surveyManager = SurveyManager.getInstance();
	this.survey = new Test();
	this.surveyManager.setSurveyActive(this.survey);
	this.questions = new ArrayList<Question>();
	this.isSaved = false;
    }

    public void promptFilePath() {
	String userResponse = "";

	System.out.print("Enter filename (without extension): ");
	userResponse = reader.nextLine();
	boolean isNotAlphanumeric = ALPHANUMERIC.matcher(userResponse).find();

	while (isNotAlphanumeric) {
	    System.out.print("Please enter only alphanumeric characters. " + "Enter filename (without extension): ");
	    userResponse = reader.nextLine();
	    isNotAlphanumeric = ALPHANUMERIC.matcher(userResponse).find();
	}

	this.filePath = userResponse + ".survey";
    }

    public void save() {
	if (this.filePath == null) {
	    this.promptFilePath();
	} else {
	    String prompt = "Current path is '" + this.filePath + "', keep current path?";

	    if (!this.promptBoolean(prompt)) {
		this.promptFilePath();
	    }
	}

	try {
	    FileOutputStream file = new FileOutputStream(this.filePath);
	    ObjectOutputStream out = new ObjectOutputStream(file);

	    out.writeObject(this.survey);

	    out.close();
	    file.close();

	    System.out.println("File succesfully written as: " + this.filePath);
	    this.isSaved = true;

	} catch (IOException e) {
	    System.err.println("save(): IOException");
	}

    }

    private boolean isKnownResponseBoolean(String response) {
	boolean isKnownResponse = false;

	String temp = response;
	isKnownResponse = KNOWN_STRINGS_FALSE.stream().anyMatch(str -> str.trim().equals(temp))
		| KNOWN_STRINGS_TRUE.stream().anyMatch(str -> str.trim().equals(temp));

	return isKnownResponse;
    }

    private boolean parseResponseBoolean(String response) {
	boolean result = false;
	String temp = response;

	if (KNOWN_STRINGS_TRUE.stream().anyMatch(str -> str.trim().equals(temp))) {
	    result = true;
	}

	return result;
    }

    public Menu selectChoice(int index) {
	Menu newMenu;
//		boolean isNotAlphanumeric;
	String userResponse1 = "";
//		Question newQuestion;
	Prompt newPrompt;
	CorrectResponse newResponse;
	ArrayList<CorrectResponse> newResponses;
	int numberNewResponses;
	CorrectResponse newAnswer;
	ArrayList<CorrectResponse> newAnswers;

	switch (index) {
	case 1:
	    /* True/False */
	    userResponse1 = this.promptForString("Enter the prompt for your true/false question:");
	    newPrompt = new PromptString(userResponse1);
	    TrueFalse newQuestionTF = new TrueFalse();
	    newQuestionTF.setPrompt(newPrompt);

	    userResponse1 = this.promptForString("Enter the correct answer for your true/false question:");
	    boolean isKnownResponse = isKnownResponseBoolean(userResponse1);

	    while (!isKnownResponse) {
		userResponse1 = this.promptForString("Response not recognized, please enter either 't' or 'f':");
		isKnownResponse = isKnownResponseBoolean(userResponse1);

	    }

	    boolean parsedResponse = this.parseResponseBoolean(userResponse1);
	    CorrectResponseBoolean newAnswerBoolean = new CorrectResponseBoolean(parsedResponse);

	    newAnswers = new ArrayList<CorrectResponse>();
	    newAnswers.add(newAnswerBoolean);
	    newQuestionTF.setResponsesSystem(newAnswers);

	    this.questions.add(newQuestionTF);
	    newMenu = this;
	    break;
	case 2:
	    /* Multiple Choice */
	    userResponse1 = this.promptForString("Enter the prompt for your multiple choice question:");
	    newPrompt = new PromptString(userResponse1);
	    MultipleChoice newQuestionMC = new MultipleChoice();
	    newQuestionMC.setPrompt(newPrompt);

	    newResponses = new ArrayList<CorrectResponse>();
	    newAnswers = new ArrayList<CorrectResponse>();

	    numberNewResponses = this
		    .promptForInteger("Enter the number of choices for your multiple choice question:");

	    for (int i = 0; i < numberNewResponses; i++) {
		System.out.println("Enter Choice #" + (i + 1) + ":");
		userResponse1 = this.reader.nextLine();

		newResponse = new CorrectResponseString(userResponse1);
		newResponses.add(newResponse);

		if (this.promptBoolean("Is this a correct answer?")) {
		    newAnswers.add(newResponse);
		}
	    }

	    newQuestionMC.setResponsesPossible(newResponses);
	    newQuestionMC.setResponsesSystem(newAnswers);

	    this.questions.add(newQuestionMC);
	    newMenu = this;
	    break;
	case 3:
	    /* Short answer */

	    userResponse1 = this.promptForString("Enter the prompt for your short answer question:");
	    newPrompt = new PromptString(userResponse1);
	    ShortAnswer newQuestionSA = new ShortAnswer();
	    newQuestionSA.setPrompt(newPrompt);

	    userResponse1 = this.promptForString("Enter the correct answer for your short answer question:");

	    newAnswer = new CorrectResponseString(userResponse1);
	    newAnswers = new ArrayList<CorrectResponse>();
	    newAnswers.add(newAnswer);

	    newQuestionSA.setResponsesSystem(newAnswers);

	    this.questions.add(newQuestionSA);
	    newMenu = this;
	    break;
	case 4:
	    /* Essay */
	    userResponse1 = this.promptForString("Enter the prompt for your essay question:");
	    newPrompt = new PromptString(userResponse1);
	    Essay newQuestionE = new Essay();
	    newQuestionE.setPrompt(newPrompt);

	    this.questions.add(newQuestionE);
	    newMenu = this;
	    break;
	case 5:
	    /* Ranking */
	    userResponse1 = this.promptForString("Enter the prompt for your ranking question:");
	    newPrompt = new PromptString(userResponse1);
	    Ranking newQuestionR = new Ranking();
	    newQuestionR.setPrompt(newPrompt);

	    newResponses = new ArrayList<CorrectResponse>();
	    newAnswers = new ArrayList<CorrectResponse>();
	    numberNewResponses = this.promptForInteger("Enter the number of choices for your ranking question:");

	    System.out.println("When entering choices, do so in the order which should"
		    + "be considered correct. They will be randomized for the user.");
	    for (int i = 0; i < numberNewResponses; i++) {
		System.out.println("Enter Choice #" + (i + 1) + ":");
		userResponse1 = this.reader.nextLine();

		newResponse = new CorrectResponseString(userResponse1);
		newResponses.add(newResponse);
		newAnswers.add(newResponse);
	    }

	    newQuestionR.setResponsesLeftSystem(newResponses);
	    newQuestionR.setResponsesRight(newAnswers);

	    this.questions.add(newQuestionR);
	    newMenu = this;
	    break;
	case 6:
	    /* Matching */
	    userResponse1 = this.promptForString("Enter the prompt for your matching question:");
	    newPrompt = new PromptString(userResponse1);
	    Matching newQuestionM = new Matching();
	    newQuestionM.setPrompt(newPrompt);

	    newResponses = new ArrayList<CorrectResponse>();
	    newAnswers = new ArrayList<CorrectResponse>();
	    numberNewResponses = this.promptForInteger("Enter the number of choices for your matching question:");

	    for (int i = 0; i < numberNewResponses; i++) {
		System.out.println("Enter Left Choice #" + (i + 1) + ":");
		userResponse1 = this.reader.nextLine();
		newResponse = new CorrectResponseString(userResponse1);
		newResponses.add(newResponse);

		System.out.println("Enter the corresponding correct answer:");
		userResponse1 = this.reader.nextLine();
		newResponse = new CorrectResponseString(userResponse1);
		newAnswers.add(newResponse);

	    }

	    newQuestionM.setResponsesLeftSystem(newResponses);
	    newQuestionM.setResponsesRight(newAnswers);

	    this.questions.add(newQuestionM);
	    newMenu = this;
	    break;
	case 7:
	    /* Return to home menu */
	    newMenu = new MenuHome();
	    break;

	default:
	    newMenu = null;
	}

	this.survey.setQuestions(this.questions);

	return newMenu;
    }

    public String getFilePath() {
	return filePath;
    }

    public void setFilePath(String filePath) {
	this.filePath = filePath;
    }

    public Survey getSurvey() {
	return survey;
    }

    public void setSurvey(Survey survey) {
	this.survey = survey;
    }

    public Boolean getIsGradable() {
	return isGradable;
    }

    public void setIsGradable(Boolean isGradable) {
	this.isGradable = isGradable;
    }

    public Boolean getIsSaved() {
	return isSaved;
    }

    public void setIsSaved(Boolean isSaved) {
	this.isSaved = isSaved;
    }

    public String toString() {
	String out = DIVIDER + "\n\t\t\t || Test Creation Menu ||\n" + DIVIDER + "\n";

	if (!this.getSurvey().getQuestions().isEmpty()) {
	    out += "\nCurrent survey: \n" + this.survey + "\n" + DIVIDER + "\n";
	}

	for (int i = 0; i < this.getNumberChoices(); i++) {
	    MenuChoice thisChoice = this.getChoices().get(i);
	    out += thisChoice.getIndex() + ") " + thisChoice.getValue() + "\n";
	}

	return out;
    }

};
